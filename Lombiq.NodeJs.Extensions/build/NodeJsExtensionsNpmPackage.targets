<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Try to enable pnpm via corepack, which is part of Node.js v16.9 and above. -->
  <Target Name="EnablePnpm">
    <!-- Ignore sporadic errors when this is run by multiple threads at the same time. -->
    <Exec Command="corepack enable"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="$(_NxVerbosity)" />
    <!-- Enable the latest version of pnpm@6. -->
    <Exec Command="corepack prepare pnpm@latest --activate"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="$(_NxVerbosity)" />
  </Target>

  <!-- Adding Node.js Extensions as an npm package to the consuming project in order to be able to run the build, clean,
       and watch scripts from there. -->
  <Target Name="AddNodeJsExtensionsAsNpmPackage"
          DependsOnTargets="EnablePnpm"
          Condition="'$(NodeJsExtensionsShouldDoWork)' == 'true'">
    <!-- Adding an informational message about the files that will be copied. -->
    <Message
      Text="Copying Node.js Extensions files to $(NodeJsExtensionsNpmPackageSourcePath):%0a - @(NodeJsExtensionsNpmPackageFiles,'%0a - ')"
      Importance="$(_NxVerbosity)" />
    <!-- Copy all necessary files to install Node.js Extensions as an npm package. -->
    <Copy SourceFiles="@(NodeJsExtensionsNpmPackageFiles)"
          DestinationFiles="$(NodeJsExtensionsNpmPackageSourcePath)/%(RecursiveDir)%(Filename)%(Extension)"
          SkipUnchangedFiles="true" />
    <!-- Define the command once for easy reuse. -->
    <PropertyGroup>
      <!-- The prefer-offline flag prevents pnpm from looking for the latest version when a satisfying version of a
           package already exists in the store. This speeds up the install process when executed multiple times. -->
      <PnpmInstallCommand>pnpm install --prod --prefer-offline</PnpmInstallCommand>
    </PropertyGroup>
    <!-- Here we install all production dependencies of Node.js Extensions inside of the .nx directory. -->
    <Message Text="[[[ $(MSBuildProjectName) ]]] Calling `$(PnpmInstallCommand)` in $(NodeJsExtensionsNpmPackageSourcePath)" Importance="$(_NxVerbosity)" />
    <Exec Command="$(PnpmInstallCommand)"
          WorkingDirectory="$(NodeJsExtensionsNpmPackageSourcePath)"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ExitCode" PropertyName="PnpmInstallExitCode" />
    </Exec>
    <!-- Use a random back-off <=10s before retrying a failed call to prevent further concurrent calls. -->
    <PropertyGroup>
      <TimeoutSeconds>$([MSBuild]::Modulo($([System.DateTime]::Now.Millisecond), 10))</TimeoutSeconds>
      <Sleep>ping -n $(TimeoutSeconds) 127.0.0.1 >NUL</Sleep>
    </PropertyGroup>
    <Exec Command="$(Sleep)" Condition="'$(PnpmInstallExitCode)' != '0'" IgnoreExitCode="true" />
    <Exec Command="$(PnpmInstallCommand)"
          WorkingDirectory="$(NodeJsExtensionsNpmPackageSourcePath)"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          Condition="'$(PnpmInstallExitCode)' != '0'">
      <Output TaskParameter="ExitCode" PropertyName="PnpmInstallExitCode" />
    </Exec>
    <!-- Use a random back-off <=10s before retrying a failed call to prevent further concurrent calls. -->
    <PropertyGroup>
      <TimeoutSeconds>$([MSBuild]::Modulo($([System.DateTime]::Now.Millisecond), 10))</TimeoutSeconds>
      <Sleep>ping -n $(TimeoutSeconds) 127.0.0.1 >NUL</Sleep>
    </PropertyGroup>
    <Exec Command="$(Sleep)" Condition="'$(PnpmInstallExitCode)' != '0'" IgnoreExitCode="true" />
    <!-- The last try. -->
    <Exec Command="$(PnpmInstallCommand)" WorkingDirectory="$(NodeJsExtensionsNpmPackageSourcePath)" Condition="'$(PnpmInstallExitCode)' != '0'" />
  </Target>

  <!-- Delete all Node.js Extensions files in the consumer project. Only necessary during development. -->
  <Target Name="DeleteNodeJsExtensionsNpmPackage">
    <!-- Remove previous version of the Node.js Extensions npm package; keeping node_modules in place, though, for
         performance reasons. -->
    <ItemGroup>
      <NodeJsExtensionsNpmPackageFoldersToDelete Condition="!Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
      <NodeJsExtensionsNpmPackageFoldersToDelete
        Include="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath)))"
        Exclude="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath), 'node_modules'))"
        Condition="Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
    </ItemGroup>
    <Message Text="[[[ $(MSBuildProjectName) ]]] Deleting files and folders in $(NodeJsExtensionsNpmPackageSourcePath)" Importance="$(_NxVerbosity)" />
    <RemoveDir Directories="@(NodeJsExtensionsNpmPackageFoldersToDelete)" ContinueOnError="true" />
    <Delete Files="$(NodeJsExtensionsNpmPackageSourcePath)/*.*" />
  </Target>

  <!-- Update all relevant Node.js Extensions files in the consumer project. Only necessary during development. -->
  <Target Name="UpdateNodeJsExtensionsNpmPackage"
          DependsOnTargets="DeleteNodeJsExtensionsNpmPackage;AddNodeJsExtensionsAsNpmPackage"
          Condition="">
  </Target>

</Project>
