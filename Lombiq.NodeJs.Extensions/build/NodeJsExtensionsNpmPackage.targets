<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Try to enable pnpm via corepack, which is part of Node.js v16.9 and above. -->
  <Target Name="EnablePnpm">
    <!-- Ignore sporadic errors when this is run by multiple threads at the same time. -->
    <Exec Command="corepack enable"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="$(NxVerbosity)" />
    <!-- Enable the latest version of pnpm@6. -->
    <Exec Command="corepack prepare pnpm@latest --activate"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="$(NxVerbosity)" />
  </Target>

  <!-- Adding Node.js Extensions as an npm package to the consuming project in order to be able to run the build, clean,
       and watch scripts from there. -->
  <Target Name="AddNodeJsExtensionsAsNpmPackage"
          DependsOnTargets="EnablePnpm"
          Condition="'$(NodeJsExtensionsShouldDoWork)' == 'true'">
    <!-- Adding an informational message about the files that will be copied. -->
    <Message
      Text="Copying Node.js Extensions files to $(NodeJsExtensionsNpmPackageSourcePath):%0a - @(NodeJsExtensionsNpmPackageFiles,'%0a - ')"
      Importance="$(NxVerbosity)" />
    <!-- Copy all necessary files to install Node.js Extensions as an npm package. -->
    <Copy SourceFiles="@(NodeJsExtensionsNpmPackageFiles)"
          DestinationFiles="$(NodeJsExtensionsNpmPackageSourcePath)/%(RecursiveDir)%(Filename)%(Extension)"
          SkipUnchangedFiles="true" />
    <!-- Define the command once for easy reuse. -->
    <PropertyGroup>
      <!-- This command installs all production dependencies of Node.js Extensions inside of the .nx directory. The
           "prefer-offline" flag prevents pnpm from looking for the latest version when a satisfying version of a
           package already exists in the store. This can speed up the install process in some cases. -->
      <PnpmInstallCommand>pnpm install --prod --prefer-offline</PnpmInstallCommand>
      <WorkingDirectory>$([MSBuild]::NormalizeDirectory($(NodeJsExtensionsNpmPackageSourcePath)))</WorkingDirectory>
    </PropertyGroup>

    <!-- Run the command repeatedly to account for random concurrency errors. -->
    <MSBuild
      Projects="$(RetryCommand)"
      Properties="Command=$(PnpmInstallCommand);NxVerbosity=$(NxVerbosity);WorkingDirectory=$(WorkingDirectory)" />
  </Target>

  <!-- Delete all Node.js Extensions files in the consumer project. Only necessary during development. -->
  <Target Name="DeleteNodeJsExtensionsNpmPackage">
    <!-- Remove previous version of the Node.js Extensions npm package; keeping node_modules in place, though, for
         performance reasons. -->
    <ItemGroup>
      <NodeJsExtensionsNpmPackageFoldersToDelete Condition="!Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
      <NodeJsExtensionsNpmPackageFoldersToDelete
        Include="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath)))"
        Exclude="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath), 'node_modules'))"
        Condition="Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
    </ItemGroup>
    <Message Text="[[[ $(MSBuildProjectName) ]]] Deleting files and folders in $(NodeJsExtensionsNpmPackageSourcePath)" Importance="$(NxVerbosity)" />
    <RemoveDir Directories="@(NodeJsExtensionsNpmPackageFoldersToDelete)" ContinueOnError="true" />
    <Delete Files="$(NodeJsExtensionsNpmPackageSourcePath)/*.*" />
  </Target>

  <!-- Update all relevant Node.js Extensions files in the consumer project. Only necessary during development. -->
  <Target Name="UpdateNodeJsExtensionsNpmPackage"
          DependsOnTargets="DeleteNodeJsExtensionsNpmPackage;AddNodeJsExtensionsAsNpmPackage"
          Condition="">
  </Target>

</Project>
