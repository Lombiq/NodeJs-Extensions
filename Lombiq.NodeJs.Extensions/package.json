{
  "name": "nodejs-extensions",
  "version": "0.0.1",
  "private": true,
  "devDependencies": {
    "@babel/cli": "^7.17.10",
    "@babel/core": "^7.18.5",
    "@babel/preset-env": "^7.18.2",
    "@textlint-rule/textlint-rule-no-invalid-control-character": "^2.0.0",
    "autoprefixer": "^10.4.7",
    "clean-css-cli": "^5.6.0",
    "eslint": "^8.17.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-only-warn": "^1.0.3",
    "eslint-plugin-promise": "^6.0.0",
    "if-env": "^1.0.4",
    "klaw": "^4.0.1",
    "markdownlint": "^0.26.0",
    "nodemon": "^2.0.16",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.4.14",
    "postcss-cli": "^9.1.0",
    "rimraf": "^3.0.2",
    "sass": "^1.52.3",
    "stylelint": "^14.9.1",
    "stylelint-config-standard-scss": "^4.0.0",
    "terser": "^5.14.1",
    "textlint": "^12.2.1",
    "textlint-rule-common-misspellings": "^1.0.1",
    "textlint-rule-doubled-spaces": "^1.0.0",
    "textlint-rule-no-todo": "^2.0.1",
    "textlint-rule-no-zero-width-spaces": "^1.0.1",
    "textlint-rule-no-start-duplicated-conjunction": "^2.0.2",
    "textlint-rule-max-comma": "^2.0.2",
    "textlint-rule-no-empty-section": "^1.1.0",
    "textlint-rule-editorconfig": "^1.0.3"
  },
  "scripts": {
    "// shell docs": "https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-shell/tests/shell.test.ts",
    "// advice    ": "When using glob patterns (*/**) as command arguments, wrap the whole argument in quotes.",
    "-": "------------------------------------------------------------------------------------------------------------",
    "build": "run-p --print-label --continue-on-error \"build:*\"",
    "compile": "run-p --print-label --continue-on-error \"compile:*\"",
    "lint": "run-p --print-label --continue-on-error \"lint:*\"",
    "clean": "run-p --print-label --continue-on-error \"clean:*\"",
    "watch": "run-p --print-label --continue-on-error \"watch:*\"",
    "--": "-------------------------------------------------- STYLES -------------------------------------------------",
    "build:styles": "TARGET_DIR=$(node scripts/get-target) SCSS_SOURCE=${SCSS_SOURCE:-Assets/Styles} SCSS_TARGET=${SCSS_TARGET:-wwwroot/css} pnpm _build:styles",
    "build:styles:args": "TARGET_DIR=$(node scripts/get-target) SCSS_SOURCE=$npm_config_source SCSS_TARGET=$npm_config_target pnpm _build:styles",
    "_build:styles": "run-p --print-label --continue-on-error _compile:styles _lint:styles",
    "lint:styles": "TARGET_DIR=$(node scripts/get-target) SCSS_SOURCE=Assets/Styles pnpm _lint:styles",
    "lint:styles:args": "TARGET_DIR=$(node scripts/get-target) SCSS_SOURCE=$npm_config_source pnpm _lint:styles",
    "_lint:styles": "stylelint \"../../$SCSS_SOURCE/**/*.scss\" || AREA=styles STEP=linting pnpm error",
    "compile:styles": "TARGET_DIR=$(node scripts/get-target) SCSS_SOURCE=${SCSS_SOURCE:-Assets/Styles} SCSS_TARGET=${SCSS_TARGET:-wwwroot/css} pnpm _compile:styles",
    "compile:styles:args": "TARGET_DIR=$(node scripts/get-target) SCSS_SOURCE=$npm_config_source SCSS_TARGET=$npm_config_target pnpm _compile:styles",
    "_compile:styles": "run-s --print-label _sass:styles _autoprefix:styles _minify:styles _rm:temp:styles || AREA=styles STEP=compilation pnpm error",
    "_sass:styles": "cd $TARGET_DIR && sass $SCSS_SOURCE:$SCSS_TARGET/_temp_ --embed-sources",
    "_autoprefix:styles": "cd $TARGET_DIR && postcss $SCSS_TARGET/_temp_/**/*.css --base $SCSS_TARGET/_temp_ --dir $SCSS_TARGET --use autoprefixer --map",
    "_minify:styles": "cd $TARGET_DIR && cleancss --batch --batch-suffix .min \"$SCSS_TARGET/**/*.css\" \"!$SCSS_TARGET/**/*.min.css\" \"!$SCSS_TARGET/_temp_/**/*\"",
    "_rm:temp:styles": "cd $TARGET_DIR && rimraf $SCSS_TARGET/_temp_",
    "clean:styles": "TARGET_DIR=$(node scripts/get-target) SCSS_TARGET=wwwroot/css pnpm _clean:styles",
    "clean:styles:args": "TARGET_DIR=$(node scripts/get-target) SCSS_TARGET=$npm_config_target pnpm _clean:styles",
    "_clean:styles": "cd $TARGET_DIR && rimraf \"$SCSS_TARGET/**/*.*\"",
    "watch:styles": "SCSS_SOURCE=Assets/Styles SCSS_TARGET=wwwroot/css pnpm _watch:styles",
    "watch:styles:args": "SCSS_SOURCE=$npm_config_source SCSS_TARGET=$npm_config_target pnpm _watch:styles",
    "_watch:styles": "nodemon --watch ../../$SCSS_SOURCE --ext scss --exec \"pnpm build:styles:args --source=$SCSS_SOURCE --target=$SCSS_TARGET\"",
    "---": "------------------------------------------------- SCRIPTS ------------------------------------------------",
    "build:scripts": "SRC=$(node scripts/get-path js source) && if-env SRC=! && echo \"Skipping scripts\" && exit 0 || run-p --print-label --continue-on-error lint:scripts compile:scripts",
    "lint:scripts": "SRC=$(node scripts/get-path js source) && pnpm eslint $SRC --max-warnings 0 || AREA=scripts STEP=linting pnpm error",
    "compile:scripts": "SRC=$(node scripts/get-path js source) && if-env SRC=! && echo \"Skipping scripts\" && exit 0 || DEST=$(node scripts/get-path js target) run-s --print-label _compile:scripts _minify:scripts",
    "_compile:scripts": "babel $SRC --out-dir $DEST --config-file ${INIT_CWD}/config/babel.config.json || AREA=scripts STEP=compilation pnpm error",
    "_minify:scripts": "node scripts/minify $DEST || AREA=scripts STEP=minifying pnpm error",
    "clean:scripts": "DEST=$(node scripts/get-path js target) && rimraf \"$DEST/**/*.*\"",
    "watch:scripts": "SRC=$(node scripts/get-path js source) && nodemon --watch $SRC --exec \"pnpm build:scripts --js-source=${npm_config_js_source:-} --js-target=${npm_config_js_target:-}\"",
    "----": "------------------------------------------------ MARKDOWN -----------------------------------------------",
    "lint:markdown": "node scripts/markdown-to-msbuild.js || AREA=markdown STEP=linting pnpm error",
    "lint:markdown:args": "node scripts/markdown-to-msbuild.js $npm_config_directory || AREA=markdown STEP=linting pnpm error",
    "lint:markdown:solution": "node scripts/markdown-to-msbuild.js _solution_ || AREA=markdown STEP=linting pnpm error",
    "-----": "--------------------------------------------------------------------------------------------------------",
    "echo-env": "npm run env",
    "error": "echo \"Error in $AREA pipeline: $STEP failed.\""
  },
  "browserslist": [
    "defaults"
  ]
}
