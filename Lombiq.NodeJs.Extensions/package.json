{
  "name": "nodejs-extensions",
  "version": "0.0.1",
  "private": true,
  "dependencies": {
    "@babel/cli": "7.22.10",
    "@babel/core": "7.22.11",
    "@babel/preset-env": "7.22.10",
    "@textlint-rule/textlint-rule-no-invalid-control-character": "2.0.0",
    "autoprefixer": "10.4.15",
    "chalk": "5.3.0",
    "clean-css-cli": "5.6.2",
    "copyfiles": "2.4.1",
    "eslint": "8.47.0",
    "if-env": "1.0.4",
    "klaw": "4.1.0",
    "markdownlint": "0.30.0",
    "nodemon": "3.0.1",
    "npm-run-all": "4.1.5",
    "postcss": "8.4.28",
    "postcss-cli": "10.1.0",
    "rimraf": "5.0.1",
    "sass": "1.59.3",
    "stylelint": "14.16.1",
    "stylelint-config-standard-scss": "6.1.0",
    "terser": "5.19.2",
    "textlint": "13.3.3",
    "textlint-rule-common-misspellings": "1.0.1",
    "textlint-rule-doubled-spaces": "1.0.2",
    "textlint-rule-max-comma": "3.0.1",
    "textlint-rule-no-empty-section": "1.1.0",
    "textlint-rule-no-start-duplicated-conjunction": "2.0.2",
    "textlint-rule-no-todo": "2.0.1",
    "textlint-rule-no-zero-width-spaces": "1.0.1"
  },
  "devDependencies": {
    "eslint": "8.47.0",
    "eslint-config-airbnb-base": "15.0.0",
    "eslint-plugin-import": "2.28.1",
    "eslint-plugin-node": "11.1.0",
    "eslint-plugin-only-warn": "1.1.0",
    "eslint-plugin-promise": "6.1.1",
    "jest": "29.6.4"
  },
  "scripts": {
    "// shell docs": "https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-shell/tests/shell.test.ts",
    "// advice    ": "When using glob patterns (*/**) as command arguments, wrap the whole argument in quotes.",
    "": "-------------------------------------------------------------------------------------------------------------",
    "build": "run-p --print-name --continue-on-error \"build:*\"",
    "compile": "run-p --print-name --continue-on-error \"compile:*\"",
    "lint": "run-p --print-name --continue-on-error \"lint:*\"",
    "clean": "run-p --print-name --continue-on-error \"clean:*\"",
    "watch": "run-p --print-name --continue-on-error \"watch:*\"",
    "-": "--------------------------------------------------- ASSETS -------------------------------------------------",
    "build:assets": "node scripts/copy-assets || AREA=assets STEP=copy pnpm error",
    "compile:assets": "node scripts/copy-assets || AREA=assets STEP=copy pnpm error",
    "clean:assets": "node scripts/clean-assets || AREA=assets STEP=clean pnpm error",
    "--": "-------------------------------------------------- STYLES -------------------------------------------------",
    "build:styles": "SRC=$(node scripts/get-path scss source) && if-env SRC=! && echo \"Skipping styles\" && exit 0 || run-p --print-name --continue-on-error lint:styles compile:styles",
    "lint:styles": "SRC=$(node scripts/get-path scss source) && node scripts/lint-styles \"$SRC/**/*.scss\" || AREA=styles STEP=linting pnpm error",
    "compile:styles": "SRC=$(node scripts/get-path scss source) && if-env SRC=! && echo \"Skipping styles\" && exit 0 || DEST=$(node scripts/get-path scss target) pnpm _compile:styles",
    "_compile:styles": "run-s --print-name _sass:styles _autoprefix:styles _minify:styles _rm:temp:styles || AREA=styles STEP=compilation pnpm error",
    "_sass:styles": "sass \"$SRC:$DEST/_temp_\" --embed-sources",
    "_autoprefix:styles": "postcss \"$DEST/_temp_/**/*.css\" --base \"$DEST/_temp_\" --dir \"$DEST\" --use autoprefixer --map",
    "_minify:styles": "cleancss --batch --batch-suffix .min \"$DEST/**/*.css\" \"!$DEST/**/*.min.css\" \"!$DEST/_temp_/**/*\"",
    "_rm:temp:styles": "rimraf \"$DEST/_temp_\"",
    "clean:styles": "DEST=$(node scripts/get-path scss target) && rimraf \"$DEST/**/*.*\"",
    "watch:styles": "SRC=$(node scripts/get-path scss source) && nodemon --watch \"$SRC\" --ext scss --exec \"pnpm build:styles\"",
    "---": "------------------------------------------------- SCRIPTS ------------------------------------------------",
    "build:scripts": "SRC=$(node scripts/get-path js source) && if-env SRC=! && echo \"Skipping scripts\" && exit 0 || run-p --print-name --continue-on-error lint:scripts compile:scripts",
    "lint:scripts": "SRC=$(node scripts/get-path js source) && node scripts/lint-scripts \"$SRC\" || AREA=scripts STEP=linting pnpm error",
    "compile:scripts": "SRC=$(node scripts/get-path js source) && if-env SRC=! && echo \"Skipping scripts\" && exit 0 || DEST=$(node scripts/get-path js target) run-s --print-name _compile:scripts _minify:scripts",
    "_compile:scripts": "babel \"$SRC\" --out-dir \"$DEST\" --config-file \"${INIT_CWD}/config/babel.config.json\" || AREA=scripts STEP=compilation pnpm error",
    "_minify:scripts": "node scripts/minify \"$DEST\" || AREA=scripts STEP=minifying pnpm error",
    "clean:scripts": "DEST=$(node scripts/get-path js target) && rimraf \"$DEST/**/*.*\"",
    "watch:scripts": "SRC=$(node scripts/get-path js source) && nodemon --watch \"$SRC\" --exec \"pnpm build:scripts\"",
    "----": "------------------------------------------------ MARKDOWN -----------------------------------------------",
    "build:markdown": "SRC=$(node scripts/get-path md source) && if-env SRC=! && echo \"Skipping markdown\" && exit 0 || pnpm lint:markdown",
    "lint:markdown": "SRC=$(node scripts/get-path md source) && if-env SRC=! && echo \"Skipping markdown lint\" && exit 0 || && node scripts/lint-markdown \"$SRC\" || AREA=markdown STEP=linting pnpm error",
    "-----": "--------------------------------------------------------------------------------------------------------",
    "echo-env": "npm run env",
    "error": "echo \"Error in $AREA pipeline: $STEP failed.\"",
    "test": "jest tests",
    "test:watch": "jest tests --watch"
  },
  "browserslist": [
    "defaults"
  ]
}
