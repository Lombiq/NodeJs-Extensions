{
  "name": "nodejs-extensions",
  "version": "0.0.1",
  "private": true,
  "dependencies": {
    "@babel/cli": "^7.19.3",
    "@babel/core": "^7.19.3",
    "@babel/preset-env": "^7.19.4",
    "@textlint-rule/textlint-rule-no-invalid-control-character": "^2.0.0",
    "autoprefixer": "^10.4.12",
    "clean-css-cli": "^5.6.1",
    "copyfiles": "^2.4.1",
    "eslint": "^8.25.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-only-warn": "^1.0.3",
    "eslint-plugin-promise": "^6.1.0",
    "if-env": "^1.0.4",
    "klaw": "^4.0.1",
    "markdownlint": "^0.26.2",
    "nodemon": "^2.0.20",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.4.18",
    "postcss-cli": "^9.1.0",
    "rimraf": "^3.0.2",
    "sass": "^1.55.0",
    "stylelint": "^14.14.0",
    "stylelint-config-standard-scss": "^4.0.0",
    "terser": "^5.15.1",
    "textlint": "^12.2.2",
    "textlint-rule-common-misspellings": "^1.0.1",
    "textlint-rule-doubled-spaces": "^1.0.0",
    "textlint-rule-max-comma": "^2.0.2",
    "textlint-rule-no-empty-section": "^1.1.0",
    "textlint-rule-no-start-duplicated-conjunction": "^2.0.2",
    "textlint-rule-no-todo": "^2.0.1",
    "textlint-rule-no-zero-width-spaces": "^1.0.1"
  },
  "devDependencies": {
    "jest": "^29.2.1"
  },
  "scripts": {
    "// shell docs": "https://github.com/yarnpkg/berry/blob/master/packages/yarnpkg-shell/tests/shell.test.ts",
    "// advice    ": "When using glob patterns (*/**) as command arguments, wrap the whole argument in quotes.",
    "": "-------------------------------------------------------------------------------------------------------------",
    "build": "run-p --print-label --continue-on-error \"build:*\" \"copy:assets\"",
    "compile": "run-p --print-label --continue-on-error \"compile:*\" \"copy:assets\"",
    "lint": "run-p --print-label --continue-on-error \"lint:*\"",
    "clean": "run-p --print-label --continue-on-error \"clean:*\"",
    "watch": "run-p --print-label --continue-on-error \"watch:*\"",
    "-": "--------------------------------------------------- ASSETS -------------------------------------------------",
    "copy:assets": "run-p --print-label --continue-on-error \"build:assets\"",
    "build:assets": "node scripts/copy-assets || AREA=assets STEP=copy pnpm error",
    "compile:assets": "node scripts/copy-assets || AREA=assets STEP=copy pnpm error",
    "clean:assets": "node scripts/clean-assets || AREA=assets STEP=clean pnpm error",
    "--": "-------------------------------------------------- STYLES -------------------------------------------------",
    "build:styles": "SRC=$(node scripts/get-path scss source) && if-env SRC=! && echo \"Skipping styles\" && exit 0 || run-p --print-label --continue-on-error lint:styles compile:styles",
    "lint:styles": "SRC=$(node scripts/get-path scss source) && node scripts/lint-styles \"$SRC/**/*.scss\" || AREA=styles STEP=linting pnpm error",
    "compile:styles": "SRC=$(node scripts/get-path scss source) && if-env SRC=! && echo \"Skipping styles\" && exit 0 || DEST=$(node scripts/get-path scss target) pnpm _compile:styles",
    "_compile:styles": "run-s --print-label _sass:styles _autoprefix:styles _minify:styles _rm:temp:styles || AREA=styles STEP=compilation pnpm error",
    "_sass:styles": "sass $SRC:$DEST/_temp_ --embed-sources",
    "_autoprefix:styles": "postcss $DEST/_temp_/**/*.css --base $DEST/_temp_ --dir $DEST --use autoprefixer --map",
    "_minify:styles": "cleancss --batch --batch-suffix .min \"$DEST/**/*.css\" \"!$DEST/**/*.min.css\" \"!$DEST/_temp_/**/*\"",
    "_rm:temp:styles": "rimraf $DEST/_temp_",
    "clean:styles": "DEST=$(node scripts/get-path scss target) && rimraf \"$DEST/**/*.*\"",
    "watch:styles": "SRC=$(node scripts/get-path scss source) && nodemon --watch $SRC --ext scss --exec \"pnpm build:styles\"",
    "---": "------------------------------------------------- SCRIPTS ------------------------------------------------",
    "build:scripts": "SRC=$(node scripts/get-path js source) && if-env SRC=! && echo \"Skipping scripts\" && exit 0 || run-p --print-label --continue-on-error lint:scripts compile:scripts",
    "lint:scripts": "SRC=$(node scripts/get-path js source) && node scripts/lint-scripts $SRC || AREA=scripts STEP=linting pnpm error",
    "compile:scripts": "SRC=$(node scripts/get-path js source) && if-env SRC=! && echo \"Skipping scripts\" && exit 0 || DEST=$(node scripts/get-path js target) run-s --print-label _compile:scripts _minify:scripts",
    "_compile:scripts": "babel $SRC --out-dir $DEST --config-file ${INIT_CWD}/config/babel.config.json || AREA=scripts STEP=compilation pnpm error",
    "_minify:scripts": "node scripts/minify $DEST || AREA=scripts STEP=minifying pnpm error",
    "clean:scripts": "DEST=$(node scripts/get-path js target) && rimraf \"$DEST/**/*.*\"",
    "watch:scripts": "SRC=$(node scripts/get-path js source) && nodemon --watch $SRC --exec \"pnpm build:scripts --js-source=${npm_config_js_source:-} --js-target=${npm_config_js_target:-}\"",
    "----": "------------------------------------------------ MARKDOWN -----------------------------------------------",
    "lint:markdown": "node scripts/lint-markdown || AREA=markdown STEP=linting pnpm error",
    "lint:markdown:args": "node scripts/lint-markdown $npm_config_directory || AREA=markdown STEP=linting pnpm error",
    "lint:markdown:solution": "node scripts/lint-markdown _solution_ || AREA=markdown STEP=linting pnpm error",
    "-----": "--------------------------------------------------------------------------------------------------------",
    "echo-env": "npm run env",
    "error": "echo \"Error in $AREA pipeline: $STEP failed.\"",
    "test": "jest tests",
    "test:watch": "jest tests --watch"
  },
  "browserslist": [
    "defaults"
  ]
}
