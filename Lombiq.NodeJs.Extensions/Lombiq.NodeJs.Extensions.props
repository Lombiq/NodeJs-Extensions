<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="../../Lombiq.Npm.Targets.props" Condition="Exists('../../Lombiq.Npm.Targets.props')" />

  <PropertyGroup>
    <NpmTargetsWorkingDirectory>$(MSBuildThisFileDirectory.TrimEnd('/\'))</NpmTargetsWorkingDirectory>
    <NodeModulesFolderPath>$(NpmTargetsWorkingDirectory)/node_modules</NodeModulesFolderPath>
    <NpmInstallStampFile>$(NodeModulesFolderPath)/.install-stamp</NpmInstallStampFile>
    <NpmDotnetPrebuildStampFile>$(NodeModulesFolderPath)/.dotnet-prebuild-stamp</NpmDotnetPrebuildStampFile>
    <!-- The NodeJsExtensions**Folder paths are used by the npm scripts and can be adjusted by the consumer project. -->
    <NodeJsExtensionsStylesSourceFolder>Assets/Styles</NodeJsExtensionsStylesSourceFolder>
    <NodeJsExtensionsStylesTargetFolder>wwwroot/css</NodeJsExtensionsStylesTargetFolder>
  </PropertyGroup>

  <PropertyGroup>
    <!-- We put the stamp file into the consumer project's node_modules folder which we are certain exists after
         installing Node.js Extensions as an npm package there. See the AddNodeJsExtensionsAsNpmPackage target.-->
    <NpmDotnetPrebuildStampFile>$(MSBuildProjectDirectory)/node_modules/.dotnet-prebuild-stamp</NpmDotnetPrebuildStampFile>
    <!-- Using pnpm to avoid explosion of PATH environment variable due to multiple nested npm script invocations. -->
    <NpmDotnetPrebuildCommand>pnpm dotnet-prebuild --if-present</NpmDotnetPrebuildCommand>
    <NpmDotnetPostcleanCommand>pnpm dotnet-postclean --if-present</NpmDotnetPostcleanCommand>
  </PropertyGroup>

  <ItemGroup>
    <NpmDotnetPrebuildWatchedFiles Remove="@(NpmDotnetPrebuildWatchedFiles)" />
    <NpmDotnetPrebuildWatchedFiles Include="$(MSBuildProjectDirectory)/$(NodeJsExtensionsStylesSourceFolder)/**/*.*" />
  </ItemGroup>

</Project>
