<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="../../Lombiq.Npm.Targets.targets" Condition="'$(NuGetBuild)' != 'true'" />

  <PropertyGroup>
    <!-- The following environment variables will be passed to the npm scripts. We evaluate them only here so that
         consumer projects can adjust them after importing our .props file. -->
    <NpmCommandsEnvironmentVariables>
      TARGET_DIR=$(MSBuildProjectDirectory.Replace('\', '/'));
      SCSS_SOURCE=$(NodeJsExtensionsStylesSourceFolder);
      SCSS_TARGET=$(NodeJsExtensionsStylesTargetFolder);
    </NpmCommandsEnvironmentVariables>
  </PropertyGroup>

  <Target Name="PrintDebugMessages" BeforeTargets="NpmDotnetPrebuild">
    <Message Text="NpmDotnetPrebuildWatchedFiles:%0a@(NpmDotnetPrebuildWatchedFiles, '    %0a')" Importance="Low" />
  </Target>

  <!-- Adding Node.js Extensions as an npm package to the consuming project in order to be able to run build, clean, and
       watch script from there. -->
  <Target Name="AddNodeJsExtensionsAsNpmPackage" AfterTargets="NpmInstall" BeforeTargets="NpmDotnetPrebuild">
    <!-- Using StandardOutputImportance="Low" will hide the output during normal operation, but show it when using
         diagnostic verbosity! O_O -->
    <Exec
      Command="pnpm list nodejs-extensions"
      ConsoleToMSBuild="true"
      StandardOutputImportance="Low"
      ContinueOnError="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="PnpmListOutput" />
    </Exec>
    <Exec
      Command="pnpm install --save-dev $(MSBuildThisFileDirectory)"
      Condition="!$(PnpmListOutput.Contains('nodejs-extensions'))"
      ContinueOnError="true" />
    <!-- As a fallback for a failing "pnpm install" call, create "node_modules" by hand - needed for the stamp file. -->
    <MakeDir
      Directories="$([System.IO.Directory]::GetParent($(NpmDotnetPrebuildStampFile)))"
      Condition="!Exists($([System.IO.Directory]::GetParent($(NpmDotnetPrebuildStampFile))))" />
  </Target>

  <!-- Files that are generated during the build need to be added manually to the EmbeddedResource item group, else they
       won't be embedded in the DLL. See: https://github.com/dotnet/msbuild/issues/3271#issuecomment-386662451. -->
  <Target
    Name="AddGeneratedFilesToEmbeddedResourceList"
    AfterTargets="NpmDotnetPrebuild"
    BeforeTargets="GenerateStylesPipelineErrors">
    <ItemGroup>
      <EmbeddedResource Include="$(NodeJsExtensionsStylesTargetFolder)/**" WithCulture="false" Type="Non-Resx" />
    </ItemGroup>
  </Target>

  <!-- The messages to search for in the build output, used in the Conditions, are defined in the package.json file. -->
  <Target
    Name="GenerateStylesPipelineErrors"
    AfterTargets="NpmDotnetPrebuild"
    BeforeTargets="Compile">
    <Message Text="Running GenerateStylesPipelineErrors for '$(MSBuildProjectName)'" />
    <Warning
      Code="NX01"
      Text="Stylelint error in Node.js Extensions script, check the build output for more information."
      Condition="$(PrebuildOutput.Contains('Error in styles pipeline: stylelint failed'))" />
    <Error
      Code="NX02"
      Text="Compilation error in Node.js Extensions script, check the build output for more information."
      Condition="$(PrebuildOutput.Contains('Error in styles pipeline: compilation failed'))" />
  </Target>

</Project>
