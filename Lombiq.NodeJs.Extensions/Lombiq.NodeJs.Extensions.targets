<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Only include this file when working with a ProjectReference; when using the NuGet package, this file will be
       included automatically via the consuming project's .nuget.g.props file. -->
  <Import Project="../../Lombiq.Npm.Targets/Lombiq.Npm.Targets.targets"
          Condition="Exists('../../Lombiq.Npm.Targets/Lombiq.Npm.Targets.targets')" />

  <PropertyGroup>
    <!-- The following environment variables will be passed to the npm scripts. We evaluate them only here so that, if
         necessary, consuming projects can adjust the dependent properties (NodeJsExtensions*Folder) in their project
         file after importing our .props file. -->
    <NpmCommandsEnvironmentVariables>
      npm_config_js_source=$(NodeJsExtensionsScriptsSourceFolder.Replace('\', '/'));
      npm_config_js_target=$(NodeJsExtensionsScriptsTargetFolder.Replace('\', '/'));
      SCSS_SOURCE=$(NodeJsExtensionsStylesSourceFolder.Replace('\', '/'));
      SCSS_TARGET=$(NodeJsExtensionsStylesTargetFolder.Replace('\', '/'));
    </NpmCommandsEnvironmentVariables>
  </PropertyGroup>

  <ItemGroup>
    <!-- The following files are used by NPM Targets to support incremental builds. We evaluate them only here so that,
         if necessary, consuming projects can adjust the *Folder paths in their project file after importing our .props
         file. -->
    <NpmDotnetPrebuildWatchedFiles Remove="@(NpmDotnetPrebuildWatchedFiles)" />
    <NpmDotnetPrebuildWatchedFiles Include="$(MSBuildProjectDirectory)/package.json" />
    <NpmDotnetPrebuildWatchedFiles Include="$(MSBuildProjectDirectory)/*lintrc*" />
    <NpmDotnetPrebuildWatchedFiles Include="$(MSBuildProjectDirectory)/$(NodeJsExtensionsScriptsSourceFolder)/**/*.js" />
    <NpmDotnetPrebuildWatchedFiles Include="$(MSBuildProjectDirectory)/$(NodeJsExtensionsStylesSourceFolder)/**/*.scss" />
    <!-- We need to manually notify MSBuild of files that should trigger a fresh build if changed. See:
         https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md. -->
    <UpToDateCheckInput Include="@(NpmDotnetPrebuildWatchedFiles)" />
  </ItemGroup>

  <!-- Try to enable pnpm via corepack, which is part of Node.js v16.9 and above. -->
  <Target Name="EnablePnpm">
    <Exec Command="corepack enable" IgnoreExitCode="true" />
  </Target>

  <!-- Try to enable pnpm via corepack, which is part of Node.js v16.9 and above. -->
  <Target Name="UpdateNodeJsExtensionsNpmPackage" BeforeTargets="Clean"
          DependsOnTargets="DeleteNodeJsExtensionsNpmPackage;AddNodeJsExtensionsAsNpmPackage">
  </Target>

  <!-- Try to enable pnpm via corepack, which is part of Node.js v16.9 and above. -->
  <Target Name="DeleteNodeJsExtensionsNpmPackage">
    <!-- Remove previous version of the Node.js Extensions npm package; keeping node_modules in place, though, for
         performance reasons. -->
    <ItemGroup>
      <NodeJsExtensionsNpmPackageFoldersToDelete Condition="!Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
      <NodeJsExtensionsNpmPackageFoldersToDelete
        Include="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath)))"
        Exclude="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath), 'node_modules'))"
        Condition="Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
    </ItemGroup>
    <RemoveDir Directories="@(NodeJsExtensionsNpmPackageFoldersToDelete)" ContinueOnError="true" />
    <Delete Files="$(NodeJsExtensionsNpmPackageSourcePath)/*.*" />
  </Target>

  <!-- Adding Node.js Extensions as an npm package to the consuming project in order to be able to run the build, clean,
       and watch scripts from there. -->
  <Target Name="AddNodeJsExtensionsAsNpmPackage" AfterTargets="BeforeResolveReferences"
          DependsOnTargets="EnablePnpm">
    <!-- Copy all necessary files to install Node.js Extensions as an npm package. -->
    <Copy SourceFiles="@(NodeJsExtensionsNpmPackageFiles)"
          DestinationFiles="$(NodeJsExtensionsNpmPackageSourcePath)/%(RecursiveDir)%(Filename)%(Extension)"
          SkipUnchangedFiles="true" />
    <!-- Here we install Node.js Extensions as an npm package into the consuming project. Using
         StandardOutputImportance="Low" will hide the output during normal operation, but show it when using "detailed"
         verbosity or higher! O_O -->
    <Exec Command="pnpm install --save-dev $(NodeJsExtensionsNpmPackageSourcePath)"
          StandardOutputImportance="Low" />
    <!-- Place a .stylelintrc file into the consuming project that won't be overwritten subsequently, so may be adjusted
         there. To prevent creating this file, set <NodeJsExtensionsCreateStylelintConfigurationFile> to false. -->
    <Copy SourceFiles="$(NodeJsExtensionsNpmPackageTargetPath)/Stylelint/.stylelintrc.consumer"
          DestinationFiles="$(MSBuildProjectDirectory)/.stylelintrc"
          Condition="'$(NodeJsExtensionsCreateStylelintConfigurationFile)' == 'true'
                     AND !Exists('$(MSBuildProjectDirectory)/.stylelintrc')" />
    <!-- Place a .eslintrc file into the consuming project that won't be overwritten subsequently, so may be adjusted
         there. To prevent creating this file, set <NodeJsExtensionsCreateESLintConfigurationFile> to false. -->
    <Copy SourceFiles="$(NodeJsExtensionsNpmPackageTargetPath)/config/.eslintrc.consumer.json"
          DestinationFiles="$(MSBuildProjectDirectory)/.eslintrc.json"
          Condition="'$(NodeJsExtensionsCreateESLintConfigurationFile)' == 'true'
                     AND !Exists('$(MSBuildProjectDirectory)/.eslintrc.json')" />
  </Target>

  <!-- Files that are generated during the build need to be added manually to the EmbeddedResource item group, else they
       won't be embedded in the DLL. See: https://github.com/dotnet/msbuild/issues/3271#issuecomment-386662451. -->
  <Target
    Name="AddGeneratedFilesToEmbeddedResourceList"
    AfterTargets="NpmDotnetPrebuild"
    BeforeTargets="EmbeddModuleAssets;Compile">
    <ItemGroup>
      <ResourcesToAdd Include="$(NodeJsExtensionsScriptsTargetFolder)/**" />
      <ResourcesToAdd Include="$(NodeJsExtensionsStylesTargetFolder)/**" />
    </ItemGroup>
    <Message Text="Adding the following to EmbeddedResource:%0a- @(ResourcesToAdd,'%0a- ')" />
    <ItemGroup>
      <EmbeddedResource Include="@(ResourcesToAdd)" WithCulture="false" Type="Non-Resx" />
    </ItemGroup>
  </Target>

  <!-- We print some helpful information here, but only when the verbosity is high enough. -->
  <Target Name="PrintDebugMessages" AfterTargets="AddGeneratedFilesToEmbeddedResourceList">
    <Message Text="NodeJsExtensionsInstallationPath:     '$(NodeJsExtensionsInstallationPath)'" />
    <Message Text="NodeJsExtensionsNpmPackageSourcePath: '$(NodeJsExtensionsNpmPackageSourcePath)'" />
    <Message Text="NodeJsExtensionsNpmPackageTargetPath: '$(NodeJsExtensionsNpmPackageSourcePath)'" />
    <Message Text="NpmTargetsWorkingDirectory:           '$(NpmTargetsWorkingDirectory)'" />
    <Message Text="NodeJsExtensionsStylesSourceFolder:   '$(NodeJsExtensionsStylesSourceFolder)'" />
    <Message Text="NodeJsExtensionsStylesTargetFolder:   '$(NodeJsExtensionsStylesTargetFolder)'" />
    <Message Text="NpmInstallStampFile:                  '$(NpmInstallStampFile)'" />
    <Message Text="NpmDotnetPrebuildStampFile:           '$(NpmDotnetPrebuildStampFile)'" />
    <Message Text="NpmDotnetPrebuildWatchedFiles:%0a - @(NpmDotnetPrebuildWatchedFiles, '%0a - ')" />
    <Message Text="NodeJsExtensionsNpmPackageFiles:%0a - @(NodeJsExtensionsNpmPackageFiles,'%0a - ')" />
  </Target>

  <!-- The messages to search for in the build output, used in the Conditions, are defined in the package.json file. -->
  <Target Name="DetectNpmErrors" AfterTargets="NpmDotnetPrebuild">
    <PropertyGroup>
      <StylesWarning Condition="$(PrebuildOutput.Contains('Error in styles pipeline: linting failed'))">true</StylesWarning>
      <StylesError Condition="$(PrebuildOutput.Contains('Error in styles pipeline: compilation failed'))">true</StylesError>
      <ScriptsWarning Condition="$(PrebuildOutput.Contains('Error in scripts pipeline: linting failed'))">true</ScriptsWarning>
      <ScriptsError Condition="$(PrebuildOutput.Contains('Error in scripts pipeline: compilation failed'))">true</ScriptsError>
      <ScriptsError Condition="$(PrebuildOutput.Contains('Error in scripts pipeline: minification failed'))">true</ScriptsError>
    </PropertyGroup>
  </Target>

  <!-- In case of an error, delete the build stamp file so that the next run will re-generate the error. -->
  <Target
    Name="DeleteBuildStampFile"
    AfterTargets="DetectNpmErrors"
    DependsOnTargets="DeleteDotnetPrebuildStampFile"
    Condition="'$(StylesError)' == 'true'" />

  <!-- Generate build Warnings or Errors in case of errors during asset processing. -->
  <Target Name="GenerateWarningsAndErrors" AfterTargets="DeleteBuildStampFile">
    <Message Text="Running GenerateWarningsAndErrors for '$(MSBuildProjectName)'" />
    <Warning
      Code="NE11"
      Text="Styles linting error in Node.js Extensions script, check the build output for more information."
      Condition="'$(StylesWarning)' == 'true'" />
    <Error
      Code="NE12"
      Text="Compilation error in Node.js Extensions script, check the build output for more information."
      Condition="'$(StylesError)' == 'true'" />
    <Warning
      Code="NE21"
      Text="Scripts linting error in Node.js Extensions script, check the build output for more information."
      Condition="'$(ScriptsWarning)' == 'true'" />
    <Error
      Code="NE22"
      Text="Scripts pipeline error in Node.js Extensions script, check the build output for more information."
      Condition="'$(ScriptsError)' == 'true'" />
  </Target>

</Project>
