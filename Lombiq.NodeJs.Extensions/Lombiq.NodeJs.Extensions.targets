<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Only include this file when working with a ProjectReference; when using the NuGet package, this file will be
       included automatically via the consuming project's .nuget.g.props file. -->
  <Import Project="../../Lombiq.Npm.Targets/Lombiq.Npm.Targets.targets"
          Condition="Exists('../../Lombiq.Npm.Targets/Lombiq.Npm.Targets.targets')" />

  <PropertyGroup>
    <!-- Don't run any of the Node.js Extensions' heavy lifting during Visual Studio Design Time Builds. -->
    <ExecDotnetPostcleanCommand Condition="'$(NodeJsExtensionsShouldDoWork)' != 'true'">false</ExecDotnetPostcleanCommand>
    <ExecDotnetPrebuildCommand Condition="'$(NodeJsExtensionsShouldDoWork)' != 'true'">false</ExecDotnetPrebuildCommand>
    <!-- Figure out what to do about ESLint. -->
    <ScriptFilesToProcess>$([System.String]::Join(@(NodeJsExtensionsScriptFiles), ''))</ScriptFilesToProcess>
    <HasAnyScriptFilesToProcess Condition="'$(ScriptFilesToProcess)' != ''">true</HasAnyScriptFilesToProcess>
    <ShouldConfigureESLintPerProject Condition="
            '$(HasAnyScriptFilesToProcess)' == 'true'                         
            AND '$(NodeJsExtensionsGlobalESLintConfigurationDirectory)' == ''
            AND !Exists('$(MSBuildProjectDirectory)/.eslintrc.json')">true</ShouldConfigureESLintPerProject>
    <!-- Figure out what to do about Stylelint. -->
    <StyleFilesToProcess>$([System.String]::Join(@(NodeJsExtensionsStyleFiles), ''))</StyleFilesToProcess>
    <HasAnyStyleFilesToProcess Condition="'$(StyleFilesToProcess)' != ''">true</HasAnyStyleFilesToProcess>
    <ShouldConfigureStylelintPerProject Condition="
            '$(HasAnyStyleFilesToProcess)' == 'true'                         
            AND '$(NodeJsExtensionsGlobalESLintConfigurationDirectory)' == ''
            AND !Exists('$(MSBuildProjectDirectory)/.stylelintrc.json')">true</ShouldConfigureStylelintPerProject>
    <!-- The importance with which to print informational messages. -->
    <_Importance>High</_Importance>
  </PropertyGroup>

  <!-- We need to install the project's npm packages first, so that the asset copy pipeline can actually copy them. -->
  <Target Name="InstallNpmPackagesInConsumingProject"
          BeforeTargets="NpmDotnetPrebuild"
          DependsOnTargets="EnablePnpm"
          Inputs="$(MSBuildProjectDirectory)/package.json"
          Outputs="$(MSBuildProjectDirectory)/node_modules/.nx_pnpm_install_stamp"
          Condition="'$(NodeJsExtensionsShouldDoWork)' == 'true'">
    <Message Text="Calling pnpm install in $(MSBuildProjectDirectory)" Importance="$(_Importance)" />
    <Exec Command="pnpm install" WorkingDirectory="$(MSBuildProjectDirectory)" StandardOutputImportance="$(_Importance)" />
    <Touch Files="$(MSBuildProjectDirectory)/node_modules/.nx_pnpm_install_stamp" AlwaysCreate="true" />
  </Target>

  <!-- Try to enable pnpm via corepack, which is part of Node.js v16.9 and above. -->
  <Target Name="EnablePnpm">
    <!-- Ignore sporadic errors when this is run by multiple threads at the same time. -->
    <Exec Command="corepack enable"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="$(_Importance)" />
    <!-- Enable the latest version of pnpm@6. -->
    <Exec Command="corepack prepare pnpm@6.32.24 --activate"
          IgnoreExitCode="true"
          IgnoreStandardErrorWarningFormat="true"
          StandardOutputImportance="$(_Importance)" />
  </Target>

  <!-- Update all relevant Node.js Extensions files in the consumer project. -->
  <Target Name="UpdateNodeJsExtensionsNpmPackage" BeforeTargets="Clean"
          DependsOnTargets="DeleteNodeJsExtensionsNpmPackage;AddNodeJsExtensionsAsNpmPackage">
  </Target>

  <!-- Delete all Node.js Extensions files in the consumer project. -->
  <Target Name="DeleteNodeJsExtensionsNpmPackage">
    <!-- Remove previous version of the Node.js Extensions npm package; keeping node_modules in place, though, for
         performance reasons. -->
    <ItemGroup>
      <NodeJsExtensionsNpmPackageFoldersToDelete Condition="!Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
      <NodeJsExtensionsNpmPackageFoldersToDelete
        Include="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath)))"
        Exclude="$([System.IO.Directory]::GetDirectories($(NodeJsExtensionsNpmPackageSourcePath), 'node_modules'))"
        Condition="Exists($(NodeJsExtensionsNpmPackageSourcePath))" />
    </ItemGroup>
    <RemoveDir Directories="@(NodeJsExtensionsNpmPackageFoldersToDelete)" ContinueOnError="true" />
    <Delete Files="$(NodeJsExtensionsNpmPackageSourcePath)/*.*" />
  </Target>

  <!-- Adding Node.js Extensions as an npm package to the consuming project in order to be able to run the build, clean,
       and watch scripts from there. -->
  <Target Name="AddNodeJsExtensionsAsNpmPackage"
          AfterTargets="BeforeResolveReferences"
          DependsOnTargets="EnablePnpm"
          Condition="'$(NodeJsExtensionsShouldDoWork)' == 'true'">
    <!-- Adding an informational message about the files that will be copied. -->
    <Message
      Text="Copying Node.js Extensions files to $(NodeJsExtensionsNpmPackageSourcePath):%0a - @(NodeJsExtensionsNpmPackageFiles,'%0a - ')"
      Importance="Low" />
    <!-- Copy all necessary files to install Node.js Extensions as an npm package. -->
    <Copy SourceFiles="@(NodeJsExtensionsNpmPackageFiles)"
          DestinationFiles="$(NodeJsExtensionsNpmPackageSourcePath)/%(RecursiveDir)%(Filename)%(Extension)"
          SkipUnchangedFiles="true" />
    <!-- Place a .stylelintrc file into the consuming project that won't be overwritten subsequently, so may be adjusted
         there. To prevent creating this file, set <NodeJsExtensionsCreateStylelintConfigurationFile> to false. -->
    <Copy SourceFiles="$(NodeJsExtensionsNpmPackageSourcePath)/config/consumer/.stylelintrc.project.json"
          DestinationFiles="$(MSBuildProjectDirectory)/.stylelintrc.json"
          Condition="'$(ShouldConfigureStylelintPerProject)' == 'true'" />
    <!-- Place a .eslintrc file into the consuming project that won't be overwritten subsequently, so may be adjusted
         there. To use a global .eslintrc file, set <NodeJsExtensionsGlobalESLintConfigurationDirectory> to the desired
         path. -->
    <Copy SourceFiles="$(NodeJsExtensionsNpmPackageSourcePath)/config/consumer/.eslintrc.project.json"
          DestinationFiles="$(MSBuildProjectDirectory)/.eslintrc.json"
          Condition="'$(ShouldConfigureESLintPerProject)' == 'true'" />
    <!-- Here we install all production dependencies of Node.js Extensions inside of the .nx directory. -->
    <Message Text="Calling pnpm install in $(NodeJsExtensionsNpmPackageSourcePath)" Importance="$(_Importance)" />
    <Exec Command="pnpm install --prod"
          WorkingDirectory="$(NodeJsExtensionsNpmPackageSourcePath)"
          StandardOutputImportance="$(_Importance)" />
    <!-- Here we link to Node.js Extensions as an npm package, which makes it available to the consumer project under
         its package name "nodejs-extensions". This needs the consumer to have a package.json file, so if there is none,
         we create a minimal one. -->
    <Copy SourceFiles="$(NodeJsExtensionsNpmPackageSourcePath)/config/consumer/package.project.json"
          DestinationFiles="$(MSBuildProjectDirectory)/package.json"
          Condition="'$(ShouldConfigureESLintPerProject)' == 'true' AND !Exists('$(MSBuildProjectDirectory)/package.json')" />
    <Copy SourceFiles="$(NodeJsExtensionsNpmPackageSourcePath)/config/consumer/package.minimal.json"
          DestinationFiles="$(MSBuildProjectDirectory)/package.json"
          Condition="'$(ShouldConfigureESLintPerProject)' != 'true' AND !Exists('$(MSBuildProjectDirectory)/package.json')" />
    <Exec Command="pnpm link $(NodeJsExtensionsNpmPackageSourcePath)" />
    <!-- Install all ESLint config dependencies of Node.js Extensions in the consumer project's directory. -->
    <Message Text="Calling pnpm install in $(MSBuildProjectDirectory):" Importance="$(_Importance)"
             Condition="!Exists($(NodeJsExtensionsGlobalESLintConfigurationDirectory))" />
    <Exec Command="pnpm install"
          WorkingDirectory="$(MSBuildProjectDirectory)"
          Condition="!Exists($(NodeJsExtensionsGlobalESLintConfigurationDirectory))"
          StandardOutputImportance="$(_Importance)" />
  </Target>

  <!-- Files that are generated during the build need to be added manually to the EmbeddedResource item group, else they
       won't be embedded in the DLL. See: https://github.com/dotnet/msbuild/issues/3271#issuecomment-386662451. -->
  <Target
    Name="AddGeneratedFilesToEmbeddedResourceList"
    AfterTargets="NpmDotnetPrebuild"
    BeforeTargets="EmbeddModuleAssets;OrchardCoreEmbedModuleAssets;Compile"
    Condition="'$(NodeJsExtensionsShouldDoWork)' == 'true'">
    <ItemGroup>
      <NodeJsExtensionsTargetFiles Include="%(NodeJsExtensionsTargetDirectories.Identity)/**/*" />
    </ItemGroup>
    <Message Text="Adding the following to EmbeddedResource:%0a- @(NodeJsExtensionsTargetFiles,'%0a- ')" Importance="$(_Importance)" />
    <ItemGroup>
      <EmbeddedResource Include="@(NodeJsExtensionsTargetFiles)" WithCulture="false" Type="Non-Resx" />
    </ItemGroup>
  </Target>

  <!-- We print some helpful information here, but only when the verbosity is high enough. -->
  <Target Name="PrintDebugMessages" AfterTargets="AddGeneratedFilesToEmbeddedResourceList">
    <Message Text="*** START PRINTING NODEJS EXTENSIONS VALUES ***" Importance="$(_Importance)" />
    <Message Text="NodeJsExtensionsInstallationPath:     '$(NodeJsExtensionsInstallationPath)'" Importance="$(_Importance)" />
    <Message Text="NodeJsExtensionsNpmPackageSourcePath: '$(NodeJsExtensionsNpmPackageSourcePath)'" Importance="$(_Importance)" />
    <Message Text="NodeJsExtensionsNpmPackageTargetPath: '$(NodeJsExtensionsNpmPackageSourcePath)'" Importance="$(_Importance)" />
    <Message Text="NpmTargetsWorkingDirectory:           '$(NpmTargetsWorkingDirectory)'" Importance="$(_Importance)" />
    <Message Text="NpmInstallStampFile:                  '$(NpmInstallStampFile)'" Importance="$(_Importance)" />
    <Message Text="NpmDotnetPrebuildStampFile:           '$(NpmDotnetPrebuildStampFile)'" Importance="$(_Importance)" />
    <Message Text="NpmDotnetPrebuildWatchedFiles:%0a - @(NpmDotnetPrebuildWatchedFiles, '%0a - ')" Importance="$(_Importance)" />
    <Message Text="NodeJsExtensionsNpmPackageFiles:%0a - @(NodeJsExtensionsNpmPackageFiles,'%0a - ')" Importance="$(_Importance)" />
    <Message Text="ScriptFilesToProcess:                 '$(ScriptFilesToProcess)'" Importance="$(_Importance)" />
    <Message Text="HasAnyScriptFilesToProcess:           '$(HasAnyScriptFilesToProcess)'" Importance="$(_Importance)" />
    <Message Text="StyleFilesToProcess:                  '$(StyleFilesToProcess)'" Importance="$(_Importance)" />
    <Message Text="HasAnyStyleFilesToProcess:            '$(HasAnyStyleFilesToProcess)'" Importance="$(_Importance)" />
    <Message Text="*** DONE PRINTING NODEJS EXTENSIONS VALUES ***" Importance="$(_Importance)" />
  </Target>

  <!-- The messages to search for in the build output, used in the Conditions, are defined in the package.json file. -->
  <Target Name="DetectNpmErrors" AfterTargets="NpmDotnetPrebuild">
    <PropertyGroup>
      <StylesWarning Condition="$(PrebuildOutput.Contains('Error in styles pipeline: linting failed'))">true</StylesWarning>
      <StylesError Condition="$(PrebuildOutput.Contains('Error in styles pipeline: compilation failed'))">true</StylesError>
      <ScriptsWarning Condition="$(PrebuildOutput.Contains('Error in scripts pipeline: linting failed'))">true</ScriptsWarning>
      <ScriptsError Condition="$(PrebuildOutput.Contains('Error in scripts pipeline: compilation failed'))">true</ScriptsError>
      <ScriptsError Condition="$(PrebuildOutput.Contains('Error in scripts pipeline: minification failed'))">true</ScriptsError>
    </PropertyGroup>
  </Target>

  <!-- In case of an error, delete the build stamp file so that the next run will re-generate the error. -->
  <Target
    Name="DeleteBuildStampFile"
    AfterTargets="DetectNpmErrors"
    DependsOnTargets="DeleteDotnetPrebuildStampFile"
    Condition="'$(StylesError)' == 'true'" />

  <!-- Generate build Warnings or Errors in case of errors during asset processing. -->
  <Target Name="GenerateWarningsAndErrors" AfterTargets="DeleteBuildStampFile">
    <Message Text="Running GenerateWarningsAndErrors for '$(MSBuildProjectName)'" />
    <Warning
      Code="NE11"
      Text="Styles linting error in Node.js Extensions script, check the build output for more information."
      Condition="'$(StylesWarning)' == 'true'" />
    <Error
      Code="NE12"
      Text="Styles pipeline error in Node.js Extensions script, check the build output for more information."
      Condition="'$(StylesError)' == 'true'" />
    <Warning
      Code="NE21"
      Text="Scripts linting error in Node.js Extensions script, check the build output for more information."
      Condition="'$(ScriptsWarning)' == 'true'" />
    <Error
      Code="NE22"
      Text="Scripts pipeline error in Node.js Extensions script, check the build output for more information."
      Condition="'$(ScriptsError)' == 'true'" />
  </Target>

  <Target Name="MarkdownValidation"
          DependsOnTargets="AddNodeJsExtensionsAsNpmPackage"
          AfterTargets="BeforeResolveReferences"
          BeforeTargets="BeforeCompile"
          Condition="'$(NodeJsExtensionsShouldDoWork)' == 'true' AND ('$(NodeJsExtensionsMarkdownAnalysisMode)' == 'true' OR '$(NodeJsExtensionsMarkdownAnalysisMode)' == 'solution')">
    <PropertyGroup Condition="'$(NodeJsExtensionsMarkdownAnalysisMode)' == 'solution'">
      <NodeJsExtensionsMarkdownAnalysisArgument>$(SolutionDir)</NodeJsExtensionsMarkdownAnalysisArgument>
    </PropertyGroup>

    <PropertyGroup Condition="'$(NodeJsExtensionsMarkdownAnalysisMode)' == 'true'">
      <NodeJsExtensionsMarkdownAnalysisArgument>$(ProjectDir)</NodeJsExtensionsMarkdownAnalysisArgument>
    </PropertyGroup>

    <Exec
      Command="pnpm lint:markdown:args --directory=$(NodeJsExtensionsMarkdownAnalysisArgument)"
      WorkingDirectory="$(NodeJsExtensionsNpmPackageSourcePath)" />
  </Target>

</Project>
